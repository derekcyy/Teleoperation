# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template models.py.jinja --
import os
import logging
import inspect
import warnings
from collections import OrderedDict

from pydantic import BaseModel, Field

from . import types, enums, errors, fields, bases
from ._types import FuncType
from ._compat import model_rebuild, field_validator
from ._builder import serialize_base64
from .generator import partial_models_ctx, PartialModelField


log: logging.Logger = logging.getLogger(__name__)
_created_partial_types: Set[str] = set()

class TurtleBot(bases.BaseTurtleBot):
    """Represents a TurtleBot record"""

    id: _int
    name: _str
    createdAt: datetime.datetime
    telemetry: Optional[List['models.Telemetry']] = None
    battery: Optional[List['models.Battery']] = None
    camera: Optional[List['models.Camera']] = None
    lidar: Optional[List['models.Lidar']] = None
    waypoint: Optional[List['models.Waypoint']] = None
    map: Optional[List['models.Map']] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.TurtleBotKeys']] = None,
        exclude: Optional[Iterable['types.TurtleBotKeys']] = None,
        required: Optional[Iterable['types.TurtleBotKeys']] = None,
        optional: Optional[Iterable['types.TurtleBotKeys']] = None,
        relations: Optional[Mapping['types.TurtleBotRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.TurtleBotKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _TurtleBot_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _TurtleBot_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _TurtleBot_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _TurtleBot_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _TurtleBot_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _TurtleBot_relational_fields:
                        raise errors.UnknownRelationalFieldError('TurtleBot', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid TurtleBot / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'TurtleBot',
            }
        )
        _created_partial_types.add(name)


class Telemetry(bases.BaseTelemetry):
    """Represents a Telemetry record"""

    id: _int
    turtleBotId: _int
    timestamp: datetime.datetime
    x: _float
    y: _float
    heading: _float
    turtleBot: Optional['models.TurtleBot'] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.TelemetryKeys']] = None,
        exclude: Optional[Iterable['types.TelemetryKeys']] = None,
        required: Optional[Iterable['types.TelemetryKeys']] = None,
        optional: Optional[Iterable['types.TelemetryKeys']] = None,
        relations: Optional[Mapping['types.TelemetryRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.TelemetryKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Telemetry_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Telemetry_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Telemetry_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Telemetry_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Telemetry_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Telemetry_relational_fields:
                        raise errors.UnknownRelationalFieldError('Telemetry', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Telemetry / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Telemetry',
            }
        )
        _created_partial_types.add(name)


class Battery(bases.BaseBattery):
    """Represents a Battery record"""

    id: _int
    turtleBotId: _int
    timestamp: datetime.datetime
    voltage: _float
    current: _float
    percentage: _float
    turtleBot: Optional['models.TurtleBot'] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.BatteryKeys']] = None,
        exclude: Optional[Iterable['types.BatteryKeys']] = None,
        required: Optional[Iterable['types.BatteryKeys']] = None,
        optional: Optional[Iterable['types.BatteryKeys']] = None,
        relations: Optional[Mapping['types.BatteryRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.BatteryKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Battery_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Battery_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Battery_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Battery_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Battery_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Battery_relational_fields:
                        raise errors.UnknownRelationalFieldError('Battery', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Battery / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Battery',
            }
        )
        _created_partial_types.add(name)


class Camera(bases.BaseCamera):
    """Represents a Camera record"""

    id: _int
    turtleBotId: _int
    timestamp: datetime.datetime
    image: _str
    turtleBot: Optional['models.TurtleBot'] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.CameraKeys']] = None,
        exclude: Optional[Iterable['types.CameraKeys']] = None,
        required: Optional[Iterable['types.CameraKeys']] = None,
        optional: Optional[Iterable['types.CameraKeys']] = None,
        relations: Optional[Mapping['types.CameraRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.CameraKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Camera_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Camera_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Camera_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Camera_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Camera_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Camera_relational_fields:
                        raise errors.UnknownRelationalFieldError('Camera', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Camera / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Camera',
            }
        )
        _created_partial_types.add(name)


class Lidar(bases.BaseLidar):
    """Represents a Lidar record"""

    id: _int
    turtleBotId: _int
    timestamp: datetime.datetime
    scan: _str
    turtleBot: Optional['models.TurtleBot'] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.LidarKeys']] = None,
        exclude: Optional[Iterable['types.LidarKeys']] = None,
        required: Optional[Iterable['types.LidarKeys']] = None,
        optional: Optional[Iterable['types.LidarKeys']] = None,
        relations: Optional[Mapping['types.LidarRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.LidarKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Lidar_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Lidar_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Lidar_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Lidar_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Lidar_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Lidar_relational_fields:
                        raise errors.UnknownRelationalFieldError('Lidar', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Lidar / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Lidar',
            }
        )
        _created_partial_types.add(name)


class Waypoint(bases.BaseWaypoint):
    """Represents a Waypoint record"""

    id: _int
    turtleBotId: _int
    timestamp: datetime.datetime
    x: _float
    y: _float
    theta: _float
    turtleBot: Optional['models.TurtleBot'] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.WaypointKeys']] = None,
        exclude: Optional[Iterable['types.WaypointKeys']] = None,
        required: Optional[Iterable['types.WaypointKeys']] = None,
        optional: Optional[Iterable['types.WaypointKeys']] = None,
        relations: Optional[Mapping['types.WaypointRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.WaypointKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Waypoint_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Waypoint_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Waypoint_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Waypoint_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Waypoint_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Waypoint_relational_fields:
                        raise errors.UnknownRelationalFieldError('Waypoint', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Waypoint / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Waypoint',
            }
        )
        _created_partial_types.add(name)


class Map(bases.BaseMap):
    """Represents a Map record"""

    id: _int
    turtleBotId: _int
    timestamp: datetime.datetime
    data: _str
    turtleBot: Optional['models.TurtleBot'] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.MapKeys']] = None,
        exclude: Optional[Iterable['types.MapKeys']] = None,
        required: Optional[Iterable['types.MapKeys']] = None,
        optional: Optional[Iterable['types.MapKeys']] = None,
        relations: Optional[Mapping['types.MapRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.MapKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Map_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Map_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Map_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Map_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Map_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Map_relational_fields:
                        raise errors.UnknownRelationalFieldError('Map', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Map / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Map',
            }
        )
        _created_partial_types.add(name)



_TurtleBot_relational_fields: Set[str] = {
        'telemetry',
        'battery',
        'camera',
        'lidar',
        'waypoint',
        'map',
    }
_TurtleBot_fields: Dict['types.TurtleBotKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('name', {
            'name': 'name',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('telemetry', {
            'name': 'telemetry',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Telemetry\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('battery', {
            'name': 'battery',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Battery\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('camera', {
            'name': 'camera',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Camera\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('lidar', {
            'name': 'lidar',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Lidar\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('waypoint', {
            'name': 'waypoint',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Waypoint\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('map', {
            'name': 'map',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Map\']',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_Telemetry_relational_fields: Set[str] = {
        'turtleBot',
    }
_Telemetry_fields: Dict['types.TelemetryKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('turtleBotId', {
            'name': 'turtleBotId',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('timestamp', {
            'name': 'timestamp',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('x', {
            'name': 'x',
            'is_list': False,
            'optional': False,
            'type': '_float',
            'is_relational': False,
            'documentation': None,
        }),
        ('y', {
            'name': 'y',
            'is_list': False,
            'optional': False,
            'type': '_float',
            'is_relational': False,
            'documentation': None,
        }),
        ('heading', {
            'name': 'heading',
            'is_list': False,
            'optional': False,
            'type': '_float',
            'is_relational': False,
            'documentation': None,
        }),
        ('turtleBot', {
            'name': 'turtleBot',
            'is_list': False,
            'optional': True,
            'type': 'models.TurtleBot',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_Battery_relational_fields: Set[str] = {
        'turtleBot',
    }
_Battery_fields: Dict['types.BatteryKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('turtleBotId', {
            'name': 'turtleBotId',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('timestamp', {
            'name': 'timestamp',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('voltage', {
            'name': 'voltage',
            'is_list': False,
            'optional': False,
            'type': '_float',
            'is_relational': False,
            'documentation': None,
        }),
        ('current', {
            'name': 'current',
            'is_list': False,
            'optional': False,
            'type': '_float',
            'is_relational': False,
            'documentation': None,
        }),
        ('percentage', {
            'name': 'percentage',
            'is_list': False,
            'optional': False,
            'type': '_float',
            'is_relational': False,
            'documentation': None,
        }),
        ('turtleBot', {
            'name': 'turtleBot',
            'is_list': False,
            'optional': True,
            'type': 'models.TurtleBot',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_Camera_relational_fields: Set[str] = {
        'turtleBot',
    }
_Camera_fields: Dict['types.CameraKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('turtleBotId', {
            'name': 'turtleBotId',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('timestamp', {
            'name': 'timestamp',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('image', {
            'name': 'image',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('turtleBot', {
            'name': 'turtleBot',
            'is_list': False,
            'optional': True,
            'type': 'models.TurtleBot',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_Lidar_relational_fields: Set[str] = {
        'turtleBot',
    }
_Lidar_fields: Dict['types.LidarKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('turtleBotId', {
            'name': 'turtleBotId',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('timestamp', {
            'name': 'timestamp',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('scan', {
            'name': 'scan',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('turtleBot', {
            'name': 'turtleBot',
            'is_list': False,
            'optional': True,
            'type': 'models.TurtleBot',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_Waypoint_relational_fields: Set[str] = {
        'turtleBot',
    }
_Waypoint_fields: Dict['types.WaypointKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('turtleBotId', {
            'name': 'turtleBotId',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('timestamp', {
            'name': 'timestamp',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('x', {
            'name': 'x',
            'is_list': False,
            'optional': False,
            'type': '_float',
            'is_relational': False,
            'documentation': None,
        }),
        ('y', {
            'name': 'y',
            'is_list': False,
            'optional': False,
            'type': '_float',
            'is_relational': False,
            'documentation': None,
        }),
        ('theta', {
            'name': 'theta',
            'is_list': False,
            'optional': False,
            'type': '_float',
            'is_relational': False,
            'documentation': None,
        }),
        ('turtleBot', {
            'name': 'turtleBot',
            'is_list': False,
            'optional': True,
            'type': 'models.TurtleBot',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_Map_relational_fields: Set[str] = {
        'turtleBot',
    }
_Map_fields: Dict['types.MapKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('turtleBotId', {
            'name': 'turtleBotId',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('timestamp', {
            'name': 'timestamp',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('data', {
            'name': 'data',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('turtleBot', {
            'name': 'turtleBot',
            'is_list': False,
            'optional': True,
            'type': 'models.TurtleBot',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)



# we have to import ourselves as relation types are namespaced to models
# e.g. models.Post
from . import models, actions

# required to support relationships between models
model_rebuild(TurtleBot)
model_rebuild(Telemetry)
model_rebuild(Battery)
model_rebuild(Camera)
model_rebuild(Lidar)
model_rebuild(Waypoint)
model_rebuild(Map)
