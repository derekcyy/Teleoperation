# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template models.py.jinja --
from pydantic import BaseModel

from . import fields, actions
from ._types import FuncType
from ._builder import serialize_base64
from ._compat import PYDANTIC_V2, ConfigDict

if TYPE_CHECKING:
    from .client import Prisma


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class _PrismaModel(BaseModel):
    if PYDANTIC_V2:
        model_config: ClassVar[ConfigDict] = ConfigDict(
            use_enum_values=True,
            arbitrary_types_allowed=True,
            populate_by_name=True,
        )
    elif not TYPE_CHECKING:
        from ._compat import BaseConfig

        class Config(BaseConfig):
            use_enum_values: bool = True
            arbitrary_types_allowed: bool = True
            allow_population_by_field_name: bool = True
            json_encoders: Dict[Any, FuncType] = {
                fields.Base64: serialize_base64,
            }

    # TODO: ensure this is required by subclasses
    __prisma_model__: ClassVar[str]


class BaseTurtleBot(_PrismaModel):
    __prisma_model__: ClassVar[Literal['TurtleBot']] = 'TurtleBot'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.TurtleBotActions[_PrismaModelT]':
        from .client import get_client

        return actions.TurtleBotActions[_PrismaModelT](client or get_client(), cls)


class BaseTelemetry(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Telemetry']] = 'Telemetry'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.TelemetryActions[_PrismaModelT]':
        from .client import get_client

        return actions.TelemetryActions[_PrismaModelT](client or get_client(), cls)


class BaseBattery(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Battery']] = 'Battery'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.BatteryActions[_PrismaModelT]':
        from .client import get_client

        return actions.BatteryActions[_PrismaModelT](client or get_client(), cls)


class BaseCamera(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Camera']] = 'Camera'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.CameraActions[_PrismaModelT]':
        from .client import get_client

        return actions.CameraActions[_PrismaModelT](client or get_client(), cls)


class BaseLidar(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Lidar']] = 'Lidar'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.LidarActions[_PrismaModelT]':
        from .client import get_client

        return actions.LidarActions[_PrismaModelT](client or get_client(), cls)


class BaseWaypoint(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Waypoint']] = 'Waypoint'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.WaypointActions[_PrismaModelT]':
        from .client import get_client

        return actions.WaypointActions[_PrismaModelT](client or get_client(), cls)


class BaseMap(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Map']] = 'Map'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.MapActions[_PrismaModelT]':
        from .client import get_client

        return actions.MapActions[_PrismaModelT](client or get_client(), cls)


